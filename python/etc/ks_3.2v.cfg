#version=RHEL7
# Install OS instead of upgrade
install

# System authorization information
auth --enableshadow --passalgo=sha512

# Use network installation media
url --url http://192.168.50.60/repo/centos/7/os/x86_64
# include jdwa ks.cfg
%include /tmp/jdwa.ks.cfg
# Use text install
text
#graphical
# Run the Setup Agent on first boot
#firstboot --enable
firstboot --disabled
# Keyboard layouts
keyboard --vckeymap=us --xlayouts='us'
# System language
lang en_US.UTF-8

# jdwa common package repo
repo --name=jdwa-common --baseurl=http://192.168.50.60/repo/jdwa/common

# System timezone
timezone Asia/Shanghai
# Disable SELinux
selinux --disabled
# Install log
logging --level=debug

%packages --ignoremissing
# from group 'core'
@core
-audit
-NetworkManager
-NetworkManager-team
-NetworkManager-tui
-aic94xx-firmware
-alsa-firmware
-bfa-firmware
-dracut-config-rescue
-dracut-config-generic
-dracut-fips
-dracut-fips-aesni
-dracut-network
-openssh-keycat
-selinux-policy-mls
-tboot
-firewalld
-plymouth
-tuned
-aic94xx-firmware
-alsa-firmware
-bfa-firmware
-dracut-config-rescue
-ivtv-firmware
-iwl100-firmware
-iwl1000-firmware
-iwl105-firmware
-iwl135-firmware
-iwl2000-firmware
-iwl2030-firmware
-iwl3160-firmware
-iwl3945-firmware
-iwl4965-firmware
-iwl5000-firmware
-iwl5150-firmware
-iwl6000-firmware
-iwl6000g2a-firmware
-iwl6000g2b-firmware
-iwl6050-firmware
-iwl7260-firmware
-iwl7265-firmware
-e2fsprogs
-btrfs-progs
# from from group 'base'
-postfix
bzip2
ethtool
unzip
wget
which
xfsdump
xz
zip
strace
traceroute
pciutils
net-tools
bash-completion
logrotate
time
tcpdump
rsync
man-pages
ntpdate
usbutils
screen
tree
ftp
cronie
openssh
openssh-clients
openssh-server
telnet

-mariadb-libs
# thirdpart
jq
python-sh
%end

%pre --log=/tmp/ks-pre.log --erroronfail
#!/usr/bin/env sh

# anaconda force scripts run in another tty, so need this hack
curTTY=`tty`
exec < $curTTY > $curTTY 2> $curTTY
clear

# force to load firewire driver
modprobe -i firewire-net

python << __PY__

import sys
import subprocess
import re
import io
from os import listdir
from distutils.version import LooseVersion

RELEASE_SERVER = 'http://192.168.50.60'

class ExecErr(Exception):
    def __init__(self, returncode, cmd, stdout, stderr):
        self.returncode = returncode
        self.cmd = cmd
        self.stdout = stdout
        self.stderr = stderr


class Option:
    def __init__(self):
        self.dev = ''
        self.mac_type = ''
        self.sys_type = ''
        self.card_num = ''
        self.oem_type = ''
        self.version = ''
        self.transfer_card_type = ''


def stdin_exec(args, shell=True):
    p = subprocess.Popen(args,
                         shell=shell,
                         stdin=sys.stdin,
                         stdout=subprocess.PIPE,
                         stderr=subprocess.PIPE)
    (stdout, stderr) = p.communicate()
    if p.returncode != 0:
        raise ExecErr(p.returncode, args, stdout, stderr)
    return stdout


def whiptail(args):
    cmd = ['whiptail', '--output-fd', '2']
    cmd.extend(args)
    p = subprocess.Popen(cmd,
                         shell=False,
                         stdin=sys.stdin,
                         stderr=subprocess.PIPE)
    (stdout, stderr) = p.communicate()
    if p.returncode != 0:
        raise ExecErr(p.returncode, cmd, stdout, stderr)
    return stderr


def sizeof_fmt(num, suffix='B'):
    for unit in ['', 'Ki', 'Mi', 'Gi', 'Ti', 'Pi', 'Ei', 'Zi']:
        if abs(num) < 1024.0:
            return "%3.1f%s%s" % (num, unit, suffix)
        num /= 1024.0
    return "%.1f%s%s" % (num, 'Yi', suffix)


def readfile(file_name):
    with io.open(file_name) as file:
        return file.readline().rstrip()


def get_blk_dev_list():
    devs = [f
            for f in listdir('/sys/class/block')
            if re.match('^sd[a-z]$', f) is not None]

    blk_devs = {}
    for dev in devs:
        vendor = readfile('/sys/class/block/{}/device/vendor'.format(dev))
        model = readfile('/sys/class/block/{}/device/model'.format(dev))
        rev = readfile('/sys/class/block/{}/device/rev'.format(dev))
        size = sizeof_fmt(
            int(readfile('/sys/class/block/{}/size'.format(dev))) * 512)
        desc = '{}--{}--{}--{}'.format(vendor, model, rev, size)
        blk_devs[dev] = desc
    return blk_devs


def is_large_install_dev(dev):
    '''
    test install dev is larger than 900G or not
    '''
    size = int(readfile('/sys/class/block/{}/size'.format(dev))) * 512
    #return size > 30 * 1024 * 1024 * 1024
    return size > 900 * 1024 * 1024 * 1024


def get_dev():
    devs = get_blk_dev_list()
    args = ['--nocancel', '--title', 'Select Install Target Device', '--menu',
            '', '10', '50', '4']
    for dev, desc in devs.iteritems():
        args.append(dev)
        args.append(desc)
    return whiptail(args)


def get_machine_type():
    args = ['--nocancel', '--title', 'Select System Type', '--menu', '', '10',
            '50', '4', 'two', 'two machine', 'three', 'three machine']
    return whiptail(args)


def get_sys_type(mac_type):
    sys_type = {
        'int': 'internal system',
        'mid': 'middle system',
        'ext': 'external system'
    }
    args = ['--nocancel', '--title', 'Select System Type', '--menu', '', 
            '10', '50', '4']
    args.extend(['int', 'internal system', 'ext', 'external system'])
    if mac_type == 'three':
        args.extend(['mid', 'middle system'])
    return whiptail(args)


def get_card_num():
    args = ['--nocancel', '--title', 'Select Cardnum', '--menu', '',
            '10', '50', '4',
            'one', 'one card',
            'two', 'two card',
            'three', 'three card',
            'four', 'four card',
            'five', 'five card',
            'six', 'six card',
            'seven', 'seven card']
    return whiptail(args)


def get_oem_type():
    args = ['--nocancel', '--title', 'Select OEM Type', '--menu', '',
            '10', '50', '4',
            'JDWA', 'jdwa uniway system',
	    'WNT', 'wnt uniway system']
    return whiptail(args)


def get_version(oem):
    version_types = [
        'DEFAULT', '',
        'HISTORY', ''
    ]
    args = ['--nocancel', '--title', 'Select Software Version', '--menu', '',
            '10', '50', '4']
    args.extend(version_types)
    while True:
        version_type = whiptail(args)
        if version_type == 'DEFAULT':
            version = get_default_version(oem)
            if version is None:
                msg = 'No default version for oem {}, please select version again'.format(oem)
                whiptail(['--msgbox', msg, '8', '50'])
                continue
            else:
                return version
        else:
            return get_history_version()


def get_history_version():
    versions = [
        '3.2.1', '',
        '3.2.2', '',
        '3.2.3', '',
        '3.2.4', '',
        '3.2.5', '',
        '3.2.6', '',
        '3.2.7', '',
        '3.2.8', '',
        '3.2.9', '',
        '3.2.10', '',
        '3.2.11', '',
        'winsec-v3.2.8', '',

    ]
    args = ['--nocancel', '--title', 'Select Software History Version', '--menu', '',
            '10', '50', '4']
    args.extend(versions)
    return whiptail(args)


def get_default_version(oem):
    default_version = {
        'JDWA': '3.2.1',
        'JDWA': '3.2.2',
        'JDWA': '3.2.3',
        'JDWA': '3.2.4',
        'JDWA': '3.2.5',
        'JDWA': '3.2.6',
        'JDWA': '3.2.7',
        'JDWA': '3.2.8',
        'JDWA': '3.2.9',
        'JDWA': '3.2.10',
        'JDWA': '3.2.11',
        'WNT': 'winsec-v3.2.8',
    }
    return default_version.get(oem)


def get_transfer_card_type():
    args = ['--nocancel', '--title', 'Select Transfer Card Type', '--menu', '',
            '10', '50', '4',
            'ether', 'Ethernet']
    return whiptail(args)


def get_opt():
    opt = Option()
    opt.dev = get_dev()
    opt.mac_type = get_machine_type()
    opt.sys_type = get_sys_type(opt.mac_type)
    if opt.mac_type == 'three':
        opt.card_num = get_card_num()
    opt.oem_type = get_oem_type()
    opt.version = get_version(opt.oem_type)
    if not opt.version.startswith('3.0'):
        opt.transfer_card_type = get_transfer_card_type()
    return opt


def save_opt(opt):
    with io.open('/tmp/uniway-release', 'w') as file:
        file.write(unicode(opt.version))
    with io.open('/tmp/systype', 'w') as file:
        file.write(unicode(opt.sys_type))
    with io.open('/tmp/cardnum', 'w') as file:
        file.write(unicode(opt.card_num))
    with io.open('/tmp/mactype', 'w') as file:
        file.write(unicode(opt.mac_type))
    with io.open('/tmp/transfer_card_type', 'w') as file:
        file.write(unicode(opt.transfer_card_type))
    with io.open('/tmp/oem', 'w') as file:
        file.write(unicode(opt.oem_type))

class SysType(object):
    int = 1 << 0
    ext = 1 << 2
    mid = 1 << 3

    @staticmethod
    def name_of(type_name):
        if type_name == 'int':
            return SysType.int
        if type_name == 'ext':
            return SysType.ext
        if type_name == 'mid':
            return SysType.mid


class MacType(object):
    two = 'two'
    three = 'three'

    @staticmethod
    def name_of(type_name):
        if type_name == 'two':
            return MacType.two
        if type_name == 'three':
            return MacType.three


class Package(object):
    def __init__(self, name, min_ver, max_ver, supported_sys):
        '''
        package is avaiable above min version, but exclude max version
        '''
        self.name = name
        self.min_ver = LooseVersion(min_ver)
        self.max_ver = None if max_ver is None else LooseVersion(max_ver)
        self.supported_sys = supported_sys

class PackagePool(object):
    def __init__(self, mac_type, sys_type):
        self.sys_type = sys_type
        self.pkgs = [
            # packages from third part
            Package('java-1.8.0-openjdk-headless', '3.0.0', None, SysType.int | SysType.ext | SysType.mid),
            #Package('openvswitch', '3.2.30', '3.2.31', SysType.int | SysType.ext | SysType.mid),

            # package from jdwa
            Package('uniway', '3.0.0', None, SysType.int | SysType.ext | SysType.mid),
        ]

    def get_pkgs(self, sys_type, version):
        def pkg_filter(pkg):
            ver = LooseVersion(version)
            if (pkg.supported_sys & sys_type) == 0:
                return False
            #if pkg.min_ver > ver:
                #return False
            if pkg.max_ver is not None and pkg.max_ver < ver:
                return False
            return True
        return filter(pkg_filter, self.pkgs)


def make_packages_cfg(opt):
    mac_type = MacType.name_of(opt.mac_type)
    sys_type = SysType.name_of(opt.sys_type)
    pkg_pool = PackagePool(mac_type, sys_type)
    pkgs = pkg_pool.get_pkgs(sys_type, opt.version)

    cfg = '%packages\n'
    for pkg in pkgs:
        cfg += pkg.name + '\n'
    cfg += '%end\n'
    return cfg


def make_cfg(opt):
    #root_size = 30000 if is_large_install_dev(opt.dev) else 2000
    root_size = 900000 if is_large_install_dev(opt.dev) else 30000
    cfg = '''
# Network information
network  --device=lo --onboot=on --hostname={opt.sys_type}

# jdwa release repo
repo --name=jdwa --baseurl={release_server}/repo/jdwa/{opt.version}

# System bootloader configuration
bootloader --location=mbr --boot-drive= --timeout=5
# Partition clearing information
clearpart --drive={opt.dev} --all --initlabel
part /boot --fstype=xfs --label=boot --size=100 --ondrive=/dev/{opt.dev}
part / --fstype=xfs --label=centos --size={root_size} --ondrive=/dev/{opt.dev}
part /var/lib --fstype=xfs --label=mysql --size=15000 --ondrive=/dev/{opt.dev}
part /var/log --fstype=xfs --label=log --grow --ondrive=/dev/{opt.dev}
'''.format(opt=opt, release_server=RELEASE_SERVER, root_size=root_size)
    if LooseVersion(opt.version) < LooseVersion('3.2.31'):
        cfg += 'rootpw --plaintext Jdwa*2003\n'
    else:
        print opt.oem_type, opt.version
        if opt.oem_type == 'H3C':
            cfg += 'rootpw --plaintext adminh3c\n'
        else:
            cfg += 'rootpw --plaintext Jdwa*2003\n'
    cfg += make_packages_cfg(opt)
    cfg += subprocess.check_output(
        'curl {}/repo/jdwa/ks-{}.cfg'.format(RELEASE_SERVER, opt.version),
        shell=True)

    with io.open('/tmp/jdwa.ks.cfg', 'w') as file:
        file.write(unicode(cfg))


while True:
    opt = get_opt()

    msg_text = '''
Target Device:       {opt.dev}
System Type:         {opt.sys_type}     
Machine Type:        {opt.mac_type}
Card Num:            {opt.card_num}
Software Version:    {opt.version} 
OEM Vendor:          {opt.oem_type} 
'''.format(opt=opt)

    try:
        whiptail(['--title', 'System Info Will Be Installed', '--yesno',
                  msg_text, '15', '50'])
    except ExecErr:
        continue
    break

make_cfg(opt)
save_opt(opt)

__PY__

%end
